TITLE:: MIDIMessage
summary:: Abstract class representing outgoing MIDI messages
categories:: External Control>MIDI
related:: Classes/MIDISender, Classes/VSTPluginMIDISender

DESCRIPTION::
MIDIMessage rethinks the MIDI output programming interface, by placing messages at the center. (link::Classes/MIDIOut:: focuses on the output device.)

MIDIMessage is an abstract class. Don't use it directly.

Instead, create and use subclasses. See the examples.

The key methods will be documented under subclasses:

list::
## link::Classes/MIDINoteMessage::
## link::Classes/MIDIControlMessage::
## link::Classes/MIDIBendMessage::
## link::Classes/MIDIPolyTouchMessage::
## link::Classes/MIDITwoByteMessage:: -- touch, program, song select
## link::Classes/MIDIRealtimeMessage:: -- song position, tune request, MIDI clock start / continue / stop / tick, active sensing, reset
## link::Classes/MIDISysexMessage::
::


subsection:: Usage

You will need a target for the messages. Currently, this is either link::Classes/MIDISender:: or link::Classes/VSTPluginMIDISender::.

Then, for each type of message you want to send, create an object for the message type. The example in this help file demonstrates the procedure for note messages.

subsection:: Patterns

link::Classes/AbstractMIDISender:: adds an event type code::\midisend:: into the default event prototype. Its usage should be identical to code::\midi::, except that the target device is specified as code::\midisend::. See Examples.


subsection:: Why?

The excellent link::https://git.iem.at/pd/vstplugin:: extension is the main motivation for this quark. Most VST instruments accept MIDI messages, but there are fundamental differences between hardware MIDI output and virtual MIDI output to the SuperCollider audio server, particularly in the handling of messaging latency.

That is, there is a need to specify MIDI message content so that emphasis::the same message-production code could be used with any message transport mechanism::.

This suggests an alternate semantic: rather than telling a port what to send, we could instead define objects to represent messages, attach these to the output port, and then simply link::#-play:: data through these message objects.

It may be less convenient, initially, to create objects per message type: "But with MIDIOut, there's just one object, and I call different methods." If you don't need cross-device compatibility, then MIDIOut may be enough. But, if you need to abstract the message contents away from the output mechanism, then it does make sense for this to be modeled in the object structure.

Also, for extensibility: Other targets could be added by subclassing link::Classes/AbstractMIDISender::. For instance, if you wanted to transmit MIDI messages over Open Sound Control, you could implement that protocol as an OSCMIDISender. Or you could translate MIDI information into an arbitrary format for, say, visualization in Processing. The code to produce the messages would be the same in all cases.


INSTANCEMETHODS::

METHOD:: play
Output this object's message.

ARGUMENT::  ... args
Override the values stored in the object. Values not specified in code::args:: will use the last-saved values. (This is similar to Pure Data or Max MIDI output objects.) Arrays will multichannel expand.


METHOD:: status
Get (or set) the appropriate MIDI status byte. Note: While a code::status_:: method is provided, a mismatch between the object type and status byte may result in undefined behavior.

ARGUMENT:: byte
Status byte (integer).


METHOD:: flags
Get or set the top four bits of the status byte. Note: A mismatch between the object type and status flags may result in undefined behavior.


METHOD:: channel
Get or set the 4-bit MIDI channel number (0-15).


METHOD:: device
Get or set the link::Classes/MIDISender:: or link::Classes/VSTPluginMIDISender:: object to which messages will be directed.


METHOD:: latency
Get or set the latency (seconds) that will be applied to outgoing messages.


METHOD:: dataA
Get or set the first data byte of the outgoing message. This may be overwritten by link::#-play::.

METHOD:: dataB
Get or set the second data byte of the outgoing message. This may be overwritten by link::#-play::.


private:: prPlay, flop, constructor, keys



EXAMPLES::

See subclass help for more detailed examples.

code::
MIDIClient.init;

// here, use methods and values appropriate to your system
// in Linux, 'connect' rules apply!
m = MIDISender(...);

// or, use a VST plugin
// this should be the ONLY change in your code!
// m = VSTPluginMIDISender(myVSTPluginController);

n = MIDINoteMessage(channel: 0, device: m, latency: 0.2);

n.play(60, 64, 2);  // sustain for two beats

n.play([60, 64, 67], 64, 2);  // multichannel expansion!


// play this using a piano sound
// instant fake serialism!

(
p = Pbind(
	\type, \midisend,
	\midisend, m,
	\midinote, Pwhite(36, 84, inf),
	\dur, Pexprand(0.07, 1.5, inf),
	\legato, Pexprand(0.3, 5.0, inf),
	\amp, Pwhite(0.4, 0.9, inf)
).play;
)

p.stop;
::
