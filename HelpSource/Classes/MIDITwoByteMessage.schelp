TITLE:: MIDITwoByteMessage
summary:: Container to output MIDI poly-touch messages
categories:: External Control>MIDI
related:: Classes/MIDIMessage, Classes/MIDISender, Classes/VSTPluginMIDISender

DESCRIPTION::
An object representing outgoing MIDI messages which have only one data byte (instead of the normal two data bytes): channel aftertouch, program, and song select.

poly-touch messages, attached to a MIDI output device.


CLASSMETHODS::

METHOD:: touch
Create an instance configured to send channel aftertouch messages.

ARGUMENT:: value
The initial aftertouch value. This may be overwritten when link::#-play::-ing the message.

ARGUMENT:: channel
The MIDI channel to send to.

ARGUMENT:: device
An instance of link::Classes/MIDISender:: or link::Classes/VSTPluginMIDISender::.

ARGUMENT:: latency
The latency (seconds) that will be applied to outgoing messages.


METHOD:: program
Create an instance configured to send program-select messages.

ARGUMENT:: value
The initial program value. This may be overwritten when link::#-play::-ing the message.

ARGUMENT:: channel
The MIDI channel to send to.

ARGUMENT:: device
An instance of link::Classes/MIDISender:: or link::Classes/VSTPluginMIDISender::.

ARGUMENT:: latency
The latency (seconds) that will be applied to outgoing messages.


METHOD:: songSelect
Create an instance configured to send program-select messages.

NOTE:: MIDI song select messages are not sent to specific channels. Therefore, the code::channel:: argument is omitted. ::

ARGUMENT:: value
The initial song value. This may be overwritten when link::#-play::-ing the message.

ARGUMENT:: device
An instance of link::Classes/MIDISender:: or link::Classes/VSTPluginMIDISender::.

ARGUMENT:: latency
The latency (seconds) that will be applied to outgoing messages.




INSTANCEMETHODS::

METHOD:: play
Put new data into this instance, and send it out the assigned port. Arguments are: value, channel. A code::nil:: in any of these positions will use the previously-set value (similar to a cold inlet in Max/Pd). Keyword addressing is not supported.

NOTE:: This method modifies the contents of the object! ::


private:: prPlay, flop, constructor, keys


EXAMPLES::

code::
MIDIClient.init;

// here, use methods and values appropriate to your system
// in Linux, 'connect' rules apply!
m = MIDISender(...);

n = MIDITwoByteMessage.touch(channel: 0, device: m, latency: 0);

// channel touch LFO
(
fork {
	var i = 0;
	loop {
		n.play(i.fold(0, 127));
		i = i + 5;
		0.05.wait;
	}
}
)
::
